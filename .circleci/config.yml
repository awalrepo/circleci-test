version: 2.1
orbs:
  slack: circleci/slack@4.9.3
commands:
  fbz_notify_start:
    steps:
    - checkout
    - run: echo 'export FBZ_TEMPLATE_START=$(jq .fbz_start.blocks ./.circleci/slack_templates.json)' >> $BASH_ENV
  fbz_notify_failed:
    steps:
      - checkout
      - run: echo 'export FBZ_TEMPLATE_FAIL=$(jq .fail ./.circleci/slack_templates.json)' >> $BASH_ENV
      - run: echo 'export GIT_COMMIT_MESSAGE="$(git log --format=%B -n 1 $CIRCLE_SHA1)"' >> $BASH_ENV
      - slack/notify:
          event: fail
          template: FBZ_TEMPLATE_FAIL
  fbz_notify_finish:
    steps:
      - checkout
      - run: echo 'export FBZ_TEMPLATE_PASS=$(jq .pass ./.circleci/slack_templates.json)' >> $BASH_ENV
      - run: echo 'export GIT_COMMIT_MESSAGE="$(git log --format=%B -n 1 $CIRCLE_SHA1)"' >> $BASH_ENV
      - slack/notify:
          event: pass
          template: FBZ_TEMPLATE_PASS
  fbz_notify_template:
    steps:
      - checkout
      - run: echo 'export FBZ_TEMPLATE_CREATE=$(jq .fbz_create ./.circleci/slack_templates.json)' >> $BASH_ENV
      - run: echo 'export FBZ_TEMPLATE_UPDATE=$(jq .fbz_update ./.circleci/slack_templates.json)' >> $BASH_ENV
  fbz_save_bash_env:
    steps:
      - run: |
          mkdir -p ~/pipeline/fbz
          cp $BASH_ENV ~/pipeline/fbz/bash_file.env
          cat ~/pipeline/fbz/bash_file.env
      - persist_to_workspace:
          root: ~/pipeline
          paths: 
            - fbz/bash_file.env
  fbz_load_bash_env:
    steps:
      - run: mkdir -p ~/pipeline/fbz
      - attach_workspace:
          at: ~/pipeline
      - run: |
          cat ~/pipeline/fbz/bash_file.env > $BASH_ENV
          cat $BASH_ENV
  
  fbz_slack_notif:
    parameters:
      pipeline:
        type: string
      notif_action:
        type: string
      channel:
        type: string
        default: C06V5CYCK32
    steps:
      - run: 
          command: |
            echo 'export << parameters.pipeline >>=":x:"' >> $BASH_ENV
          name: Slack - Detecting Job Status (FAIL)
          when: on_fail
      - run: 
          command: |
            echo 'export << parameters.pipeline >>=":white_check_mark:"' >> $BASH_ENV
          name: Slack - Detecting Job Status (PASS)
          when: on_success
      - when:
          condition:
            equal: ["on_hold", << parameters.notif_action >>]
          steps:
            - run: echo 'export SLACK_USER=<@DCX8Z063D>' >> $BASH_ENV
      - when:
          condition:
            equal: ["create", << parameters.notif_action >>]
          steps:
            - run:
                name: Send Slack Notif - Create
                command: |
                  SLACK_CHANNEL=<< parameters.channel >> SLACK_MSG_BODY=$(eval echo $(echo "$FBZ_TEMPLATE_CREATE" | jq -c | jq -R))
                  SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                  eval echo 'export SLACK_MESSAGE_TS=$(echo "$SLACK_SENT_RESPONSE" | jq '.ts')' >> $BASH_ENV
                when: always
      - when:
          condition:
            or:
              - equal: ["update", << parameters.notif_action >>]
              - equal: ["on_hold", << parameters.notif_action >>]
          steps:
            - run:
                name: Send Slack Notif - Update
                command: |
                  SLACK_CHANNEL=<< parameters.channel >> SLACK_MESSAGE_TS=$SLACK_MESSAGE_TS SLACK_MSG_BODY=$(eval echo $(echo "$FBZ_TEMPLATE_UPDATE" | jq -c | jq -R))
                  curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.update
                when: always
      - fbz_save_bash_env
jobs:
  fbz_notify_start_deployment:
    docker:
      - image: cimg/base:stable
    parameters:
      notif_action:
        type: string
    steps:      
      - fbz_notify_template
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_START"
          notif_action: << parameters.notif_action >>
      
  fbz_notify_unit_deployment:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout

  fbz_notify_on_hold:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_HOLD"
          notif_action: "on_hold"
      
  fbz_notify_prod_deployment:
    docker:
      - image: cimg/base:stable
    parameters:
      notif_action:
        type: string
    steps:
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_PROD"
          notif_action: "update"
  fbz_notify_smoke_deployment:
    docker:
      - image: cimg/base:stable
    parameters:
      notif_action:
        type: string
    steps:
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_SMOKE"
          notif_action: "update"
  fbz_notify_visual_deployment:
    docker:
      - image: cimg/base:stable
    parameters:
      notif_action:
        type: string
    steps:
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_VISUAL"
          notif_action: "update"

workflows:
  build-test-and-deploy:
    jobs:
      - fbz_notify_start_deployment:
          notif_action: "create"
          context: slack-secrets
      - fbz_notify_unit_deployment:
          requires:
            - fbz_notify_start_deployment
          context: slack-secrets
          post-steps:
            - fbz_slack_notif:
                pipeline: "FBZ_ICON_UNIT"
                notif_action: "update"
      - fbz_notify_on_hold:
          requires:
            - fbz_notify_unit_deployment
          context: slack-secrets
      - hold-deploy-production-pipeline:
          type: approval
          requires:
            - fbz_notify_on_hold
      - fbz_notify_prod_deployment:
          notif_action: "update"
          requires:
            - hold-deploy-production-pipeline
          context: slack-secrets
      - fbz_notify_smoke_deployment:
          notif_action: "update"
          requires:
            - fbz_notify_prod_deployment
          context: slack-secrets
      - fbz_notify_visual_deployment:
          notif_action: "update"
          requires:
            - fbz_notify_smoke_deployment
          context: slack-secrets
      

