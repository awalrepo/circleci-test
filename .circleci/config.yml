version: 2.1
parameters:
  slack-channel:
    type: string
    default: C06V5CYCK32
  slack-notif-branch:
    type: string
    default: main
  fbz-file-share-name:
    type: string
    default: bash_file.env
orbs:
  gh: circleci/github-cli@2.3.0
commands:
  fbz_notify_start:
    steps:
    - checkout
    - run: echo 'export FBZ_TEMPLATE_START=$(jq .fbz_start.blocks ./.circleci/slack_templates.json)' >> $BASH_ENV
  fbz_notify_failed:
    steps:
      - checkout
      - run: echo 'export FBZ_TEMPLATE_FAIL=$(jq .fail ./.circleci/slack_templates.json)' >> $BASH_ENV
      - run: echo 'export GIT_COMMIT_MESSAGE="$(git log --format=%B -n 1 $CIRCLE_SHA1)"' >> $BASH_ENV
      - slack/notify:
          event: fail
          template: FBZ_TEMPLATE_FAIL
  fbz_notify_finish:
    steps:
      - checkout
      - run: echo 'export FBZ_TEMPLATE_PASS=$(jq .pass ./.circleci/slack_templates.json)' >> $BASH_ENV
      - run: echo 'export GIT_COMMIT_MESSAGE="$(git log --format=%B -n 1 $CIRCLE_SHA1)"' >> $BASH_ENV
      - slack/notify:
          event: pass
          template: FBZ_TEMPLATE_PASS
  fbz_notify_template:
    steps:
      - when:
          condition:
            equal: [<< pipeline.parameters.slack-notif-branch >>, << pipeline.git.branch >>]
          steps:
            - checkout
            - run: 
                command: |
                  echo 'export FBZ_TEMPLATE_CREATE=$(jq .fbz_create ./.circleci/slack_templates.json)' >> $BASH_ENV
                  echo 'export FBZ_TEMPLATE_CREATE=$(jq .fbz_create ./.circleci/slack_templates.json)' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                  echo 'export FBZ_TEMPLATE_UPDATE=$(jq .fbz_update ./.circleci/slack_templates.json)' >> $BASH_ENV
                  echo 'export FBZ_TEMPLATE_UPDATE=$(jq .fbz_update ./.circleci/slack_templates.json)' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>

  fbz_persist_file_share:
    steps:
      - persist_to_workspace:
          root: ~/pipeline
          paths: 
            - fbz/<< pipeline.parameters.fbz-file-share-name >>

  fbz_get_user_slack_id:
    steps:
      - when:
          condition:
            equal: [<< pipeline.parameters.slack-notif-branch >>, << pipeline.git.branch >>]
          steps:
            - checkout
            - run: 
                command: |
                  SLACK_ID=$(jq '.map_github_slack_contributors[] | .["'$CIRCLE_USERNAME'"] // "@'$CIRCLE_USERNAME'"' ./.circleci/slack_templates.json)
                  echo "export SLACK_ID=$SLACK_ID" >> $BASH_ENV
                  echo "export SLACK_ID=$SLACK_ID" >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                  cat $BASH_ENV


  fbz_create_file_share:
    steps:
      - when:
          condition:
            equal: [<< pipeline.parameters.slack-notif-branch >>, << pipeline.git.branch >>]
          steps: 
            - run: |
                mkdir -p ~/pipeline/fbz
                echo -n "" > ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
            - fbz_persist_file_share
  # fbz_save_bash_env:
  #   steps:
  #     - when:
  #         condition:
  #           equal: [<< pipeline.parameters.slack-notif-branch >>, << pipeline.git.branch >>]
  #         steps:
  #           - run: |
  #               mkdir -p ~/pipeline/fbz
  #               cp $BASH_ENV ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
  #               cat ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
  #           - persist_to_workspace:
  #               root: ~/pipeline
  #               paths: 
  #                 - fbz/<< pipeline.parameters.fbz-file-share-name >>
  fbz_load_bash_env:
    steps:
      - when:
          condition:
            equal: [<< pipeline.parameters.slack-notif-branch >> , << pipeline.git.branch >>]
          steps:
            - run: mkdir -p ~/pipeline/fbz
            - attach_workspace:
                at: ~/pipeline
            - run: |
                cat ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >> >> $BASH_ENV
                cat $BASH_ENV

  fbz_slack_notif:
    parameters:
      pipeline:
        type: string
      notif_action:
        type: string
      channel:
        type: string
        default: << pipeline.parameters.slack-channel >>
      success_mark:
        type: string
        default: ":white_check_mark:"
    steps:
      - when:
          condition: 
            equal: [<< pipeline.parameters.slack-notif-branch >>, << pipeline.git.branch >>]
          steps:
            - run: sed -i "/SLACK_PARAM_MENTIONS/d" ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
            - run: 
                command: |
                  echo 'export << parameters.pipeline >>=":x:"' >> $BASH_ENV
                  echo 'export << parameters.pipeline >>=":x:"' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                  echo 'export SLACK_PARAM_MENTIONS="'$SLACK_ID'"' >> $BASH_ENV
                  echo 'export SLACK_PARAM_MENTIONS="'$SLACK_ID'"' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                name: Slack - Detecting Job Status (FAIL)
                when: on_fail
            - run: 
                command: |
                  echo 'export << parameters.pipeline >>="<< parameters.success_mark >>"' >> $BASH_ENV
                  echo 'export << parameters.pipeline >>="<< parameters.success_mark >>"' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                  echo 'export SLACK_PARAM_MENTIONS=" "' >> $BASH_ENV
                  echo 'export SLACK_PARAM_MENTIONS=" "' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                name: Slack - Detecting Job Status (PASS)
                when: on_success
            - when:
                condition:
                  equal: ["on_hold", << parameters.notif_action >>]
                steps:
                  - run: 
                      command: |
                        echo 'export SLACK_PARAM_MENTIONS="'$SLACK_ID'"' >> $BASH_ENV
                        echo 'export SLACK_PARAM_MENTIONS="'$SLACK_ID'"' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
            - when:
                condition:
                  equal: ["create", << parameters.notif_action >>]
                steps:
                  - run:
                      name: Send Slack Notif - Create
                      command: |
                        SLACK_CHANNEL=<< parameters.channel >> SLACK_MSG_BODY=$(eval echo $(echo "$FBZ_TEMPLATE_CREATE" | jq -c | jq -R))
                        SLACK_SENT_RESPONSE=$(curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.postMessage)
                        eval echo 'export SLACK_MESSAGE_TS=$(echo "$SLACK_SENT_RESPONSE" | jq '.ts')' >> $BASH_ENV
                        eval echo 'export SLACK_MESSAGE_TS=$(echo "$SLACK_SENT_RESPONSE" | jq '.ts')' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                      when: always
            - when:
                condition:
                  or:
                    - equal: ["update", << parameters.notif_action >>]
                    - equal: ["on_hold", << parameters.notif_action >>]
                steps:
                  - run:
                      name: Send Slack Notif - Update
                      command: |
                        SLACK_CHANNEL=<< parameters.channel >> SLACK_MESSAGE_TS=$SLACK_MESSAGE_TS SLACK_MSG_BODY=$(eval echo $(echo "$FBZ_TEMPLATE_UPDATE" | jq -c | jq -R))
                        curl -s -f -X POST -H 'Content-type: application/json' -H "Authorization: Bearer $SLACK_ACCESS_TOKEN" --data "$SLACK_MSG_BODY" https://slack.com/api/chat.update
                      when: always
            - run: cat ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
            - fbz_persist_file_share
                      
  fbz_pr_branch_name:
    steps:
      - when:
          condition:
            equal: [<< pipeline.parameters.slack-notif-branch >>, << pipeline.git.branch >>]
          steps:
            - checkout
            - gh/setup:
                token: THE_TOKEN
            - gh/install
            - run:
                command: |
                  GH_CLI_RESPONSE=$(gh pr list --state merged --base $CIRCLE_BRANCH --json headRefName,mergedAt)
                  FBZ_PR_BRANCH_NAME=$(echo "$GH_CLI_RESPONSE" | jq 'sort_by(.mergedAt) | reverse | .[99].headRefName // "-"')
                  echo 'export FBZ_PR_BRANCH_NAME=$FBZ_PR_BRANCH_NAME' >> $BASH_ENV
                  echo 'export FBZ_PR_BRANCH_NAME=$FBZ_PR_BRANCH_NAME' >> ~/pipeline/fbz/<< pipeline.parameters.fbz-file-share-name >>
                  cat $BASH_ENV

jobs:
  fbz_notify_start_deployment:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_create_file_share
      - fbz_get_user_slack_id   
      - fbz_pr_branch_name
      - fbz_notify_template
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_START"
          notif_action: "create"

  fbz_notif_update_state:
    docker:
      - image: cimg/base:stable
    parameters:
      pipeline:
        type: string
      notif_action:
        type: string
      success_mark:
        type: string
        default: ":white_check_mark:"
    steps:      
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: << parameters.pipeline >>
          notif_action: << parameters.notif_action >>
          success_mark: << parameters.success_mark >>
      
  fbz_notify_unit_deployment:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout
      - run: echo "fbz_notify_unit_deployment"

  fbz_notify_on_hold:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_HOLD"
          notif_action: "on_hold"
          success_mark: ":double_vertical_bar:"

  fbz_notify_approve:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout
      - fbz_slack_notif:
          pipeline: "FBZ_ICON_HOLD"
          notif_action: "on_hold"

  fbz_notify_prod_deployment:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout
      - run: echo "fbz_notify_prod_deployment"

  fbz_notify_smoke_deployment:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout

  fbz_notify_visual_deployment:
    docker:
      - image: cimg/base:stable
    steps:
      - fbz_load_bash_env
      - checkout
      - run: echo "fbz_notify_visual_deployment"

workflows:
  build-test-and-deploy:
    jobs:
      - fbz_notify_start_deployment:
          context: 
            - slack-secrets
            - github-secrets

      - fbz_notify_unit_deployment:
          requires:
            - fbz_notify_start_deployment
          context: slack-secrets
          post-steps:
            - fbz_slack_notif:
                pipeline: "FBZ_ICON_UNIT"
                notif_action: "update"

      - fbz_notif_update_state:
          name: "Update state hold"
          requires:
            - fbz_notify_unit_deployment
          context: slack-secrets
          pipeline: "FBZ_ICON_HOLD"
          notif_action: "on_hold"
          success_mark: ":double_vertical_bar:"
          filters:
            branches:
              only:
                - main

      - hold-deploy-production-pipeline:
          type: approval
          requires:
            - "Update state hold"

      - fbz_notif_update_state:
          name: "Update state approved"
          requires:
            - hold-deploy-production-pipeline
          context: slack-secrets
          pipeline: "FBZ_ICON_HOLD"
          notif_action: "on_hold"

      - fbz_notify_prod_deployment:
          requires:
            - "Update state approved"
          context: slack-secrets
          post-steps:
            - fbz_slack_notif:
                pipeline: "FBZ_ICON_PROD"
                notif_action: "update"

      - fbz_notify_smoke_deployment:
          requires:
            - fbz_notify_prod_deployment
          context: slack-secrets
          post-steps:
            - fbz_slack_notif:
                pipeline: "FBZ_ICON_SMOKE"
                notif_action: "update"

      - fbz_notify_visual_deployment:
          requires:
            - fbz_notify_smoke_deployment
          context: slack-secrets
          post-steps:
            - fbz_slack_notif:
                pipeline: "FBZ_ICON_VISUAL"
                notif_action: "update"
